"""  Constants for DHCP
"""

from collections import namedtuple
from struct import pack

# DHCP Header Fields
Field = namedtuple('Field', ('default','location', 'length', 'fmt'))
# Operation code, 1 request; 2 reply message
OP = Field(default=[1], location=0, length=1, fmt='!1b')
# 1 is for hardware type ethernet
HTYPE = Field(default=[1], location=1, length=1, fmt='!1b')
# Hardware address length
HLEN = Field(default=[6], location=2, length=1, fmt='!1b')
# Amount of hops used via relay agents
HOPS = Field(default=[0], location=3, length=1, fmt='!1b')
# Transaction Identifier, 32 bit client identifier generated by the client
XID = Field(default=[''], location=4, length=4, fmt='!4s')
# Number of seconds elapsed since client began lease attempt
SECS = Field(default=[0, 0], location=8, length=2, fmt='!2b')
# Fuck knows
FLAGS = Field(default=[''], location=10, length=2, fmt='!2s')
 # Client IP, only if client IP is valid in: BOUND, RENEWING or REBINDING states
CIADDR = Field(default=[''], location=12, length=4, fmt='!4s')
# IP the server is assigning to the client
YIADDR = Field(default=[''], location=16, length=4, fmt='!4s')
# The server address the next message should be sent to
SIADDR = Field(default=[''], location=20, length=4, fmt='!4s')
# Gateway IP address, facilitates for different subnet comm
GIADDR = Field(default=[''], location=24, length=4, fmt='!4s')
# Client hardware address, layer two, identification
CHADDR = Field(default=[''], location=28, length=16, fmt='!16s')
# Server name which is sending OFFER OR ACK. May be overloaded
SNAME = Field(default=[''], location=44, length=64, fmt='!64s')
# Optional boot file which client is requesting from server
FILE = Field(default=[''], location=108, length=128, fmt='!128s')
# RFC: 1048p2
MAGIC_COOKIE = Field(default=[99, 130, 83, 99], location=236, length=4, fmt='!4B')
HEADER_FIELDS = {'op': OP,
                 'htype': HTYPE,
                 'hlen': HLEN,
                 'hops': HOPS,
                 'xid': XID,
                 'secs': SECS,
                 'flags': FLAGS,
                 'ciaddr': CIADDR,
                 'yiaddr': YIADDR,
                 'siaddr': SIADDR,
                 'giaddr': GIADDR,
                 'chaddr': CHADDR,
                 'sname': SNAME,
                 'file': FILE,
                 'magic_cookie': MAGIC_COOKIE
                 }

class DHCPOption(object):
    format = None
    length = None
    code = None
    value = None

    def get_encoded_option(self):
        return pack(self.format, *self.value)

class MessageTypeOption(DHCPOption):
    """ DHCP Option 53
    """

    format = '!3b'
    code = 53
    length = 1
    type_lookup = {'DHCPDISCOVER': 1,
                   'DHCPOFFER': 2,
                   'DHCPREQUEST': 3,
                   'DHCPDECLINE': 4,
                   'DHCPACK': 5,
                   'DHCPNAK': 6,
                   'DHCPRELEASE': 7,
                   'DHCPINFORM': 8}

    def __init__(self, type):
        try:
            self.value = [self.code, self.length, self.type_lookup[type]]
        except AttributeError:
            raise AttributeError("Unknown DHCP option 53 Message Type: {}".format(type))

class EndOption(DHCPOption):
    """ End Option
    """
    format = '!B'
    code = 255
    value = [code]


class RequestIPOption(DHCPOption):
    """ DHCP Option 50 for requesting specific IP address

    """
    format = '!6B'
    code = 50
    length = 4

    def __init__(self, ip_address):
        self.value = [self.code, self.length]
        self.value.extend(map(int, ip_address.split('.')))


class ServerIdentifierOption(DHCPOption):
    """ DHCP Option 54 - to identify which dhcp server you're responding to
    """

    format = '!6B'
    code = 54
    length = 4

    def __init__(self, server_ident):
        self.value = [self.code, self.length]
        self.value.extend(map(int, server_ident.split('.')))

